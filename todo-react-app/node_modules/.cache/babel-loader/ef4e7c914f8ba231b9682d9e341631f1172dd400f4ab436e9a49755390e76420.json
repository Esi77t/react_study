{"ast":null,"code":"import axios from \"axios\";\nimport { API_BASE_URL } from \"../api-config\";\n\n// 1. axios 객체 생성\n// 바뀌지 않는 공통적인 기본 설정\n// create() : axios가 제공하는 팩토리 함수\n// 팩토리 패턴 : 여러 곳에서 api의 호출이 필요할 때, 매번 같은 설정을 반복하지 않고 한 번에 설정하는 방식\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// 인터셉터 : 요청 전/후에 공통 로직을 삽입할 수 있는 로직으로, 인증 토큰 첨부나 에러 일괄 처리에 핵심적으로 사용\n\n// 2. 요청 인터셉터로 토큰 자동 첨부\n// interceptors.request.use(onFulfilled, onRejected) : 역할이 서버로 전송되기 전에 호출 될 콜백함수를 등록\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"ACCESS_TOKEN\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// 3. 응답 인터셉터로 403 처리\n\n// 요청하는 메서드를 만들 것\n// api : 호출할 api 경로(/todo, /users)\n// method : HTTP메서드(GET, POST, PUT, DELETE)\n// request : 요청에 담을 데이터(주로 POST, PUT에서 사용)\nexport function call(api, method, request) {\n  let headers = new Headers({\n    \"Content-Type\": \"application/json\"\n  });\n\n  // 로컬 스토리지에 저장된 ACESS_TOKEN 가져오기\n  const acceessToken = localStorage.getItem(\"ACCESS_TOKEN\");\n  if (acceessToken && acceessToken !== null) {\n    headers.append(\"Authorization\", \"Bearer \" + acceessToken);\n  }\n\n  // Content-Type : application/json\n  // Authorization : Bearer 토큰 값\n\n  // 기본 옵션 설정\n  let options = {\n    url: API_BASE_URL + api,\n    method: method,\n    headers: headers\n  };\n\n  // false, 0, 빈 문자열, null, undefined, NaN -> false로 취급\n  if (request) {\n    // JSON.stringify() : 객체를 JSON문자열로 반환\n    options.data = JSON.stringify(request);\n  }\n\n  // 앞서 설정한 options 객체를 사용하여 axios로 HTTP요청을 보낸다.\n  return axios(options)\n  // 요청이 성공적으로 처리된 경우 실행되는 코드\n  .then(response => {\n    console.log(response.data);\n    return response.data;\n  }).catch(error => {\n    console.log(\"에러코드 : \", error);\n    if (error.status === 403) {\n      // 403코드면 로그인 path로 가라\n      // window.location.href : 브라우저가 해당 URL로 새 HTTP요청을 보낸다\n      // 사용자가 한 것은 아니지만 새 요청이 발생\n      window.location.href = \"/login\";\n    }\n  });\n}\n\n// userDTO 매개변수에 담긴 내용\n// {username:username, password:password}\nexport function signin(userDTO) {\n  return call(\"/auth/signin\", \"POST\", userDTO).then(response => {\n    console.log(\"response : \" + response);\n    // alert(\"로그인 토큰 :\" + response.token);\n    if (response.token) {\n      // 로컬 스토리지에 토큰 저장\n      localStorage.setItem(\"ACCESS_TOKEN\", response.token);\n      // todo 화면으로 리다이렉트\n      window.location.href = \"/\";\n    } else {\n      window.location.href = \"/login\";\n    }\n  });\n}","map":{"version":3,"names":["axios","API_BASE_URL","apiClient","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","call","api","method","Headers","acceessToken","append","options","url","data","JSON","stringify","then","response","console","log","catch","error","status","window","location","href","signin","userDTO","setItem"],"sources":["D:/full_stack_osh/4. react/todo-react-app/src/service/ApiService.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { API_BASE_URL } from \"../api-config\";\r\n\r\n// 1. axios 객체 생성\r\n// 바뀌지 않는 공통적인 기본 설정\r\n// create() : axios가 제공하는 팩토리 함수\r\n// 팩토리 패턴 : 여러 곳에서 api의 호출이 필요할 때, 매번 같은 설정을 반복하지 않고 한 번에 설정하는 방식\r\nconst apiClient = axios.create({\r\n    baseURL: API_BASE_URL,\r\n    headers : {\r\n        \"Content-Type\":\"application/json\"\r\n    }\r\n})\r\n\r\n// 인터셉터 : 요청 전/후에 공통 로직을 삽입할 수 있는 로직으로, 인증 토큰 첨부나 에러 일괄 처리에 핵심적으로 사용\r\n\r\n// 2. 요청 인터셉터로 토큰 자동 첨부\r\n// interceptors.request.use(onFulfilled, onRejected) : 역할이 서버로 전송되기 전에 호출 될 콜백함수를 등록\r\napiClient.interceptors.request.use(config => {\r\n    const token = localStorage.getItem(\"ACCESS_TOKEN\");\r\n    if(token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n})\r\n\r\n// 3. 응답 인터셉터로 403 처리\r\n\r\n// 요청하는 메서드를 만들 것\r\n// api : 호출할 api 경로(/todo, /users)\r\n// method : HTTP메서드(GET, POST, PUT, DELETE)\r\n// request : 요청에 담을 데이터(주로 POST, PUT에서 사용)\r\nexport function call(api, method, request) {\r\n\r\n    let headers = new Headers({\r\n        \"Content-Type\":\"application/json\"\r\n    })\r\n\r\n    // 로컬 스토리지에 저장된 ACESS_TOKEN 가져오기\r\n    const acceessToken = localStorage.getItem(\"ACCESS_TOKEN\");\r\n    if(acceessToken && acceessToken !== null) {\r\n        headers.append(\"Authorization\", \"Bearer \" + acceessToken);\r\n    }\r\n\r\n    // Content-Type : application/json\r\n    // Authorization : Bearer 토큰 값\r\n\r\n    // 기본 옵션 설정\r\n    let options = {\r\n        url : API_BASE_URL + api,\r\n        method : method,\r\n        headers : headers,\r\n    }\r\n\r\n    // false, 0, 빈 문자열, null, undefined, NaN -> false로 취급\r\n    if(request) {\r\n        // JSON.stringify() : 객체를 JSON문자열로 반환\r\n        options.data = JSON.stringify(request);\r\n    }\r\n\r\n    // 앞서 설정한 options 객체를 사용하여 axios로 HTTP요청을 보낸다.\r\n    return axios(options)\r\n            // 요청이 성공적으로 처리된 경우 실행되는 코드\r\n            .then(response => {\r\n                console.log(response.data);\r\n                return response.data;\r\n            })\r\n            .catch(error => {\r\n                console.log(\"에러코드 : \", error);\r\n                if(error.status === 403) {\r\n                    // 403코드면 로그인 path로 가라\r\n                    // window.location.href : 브라우저가 해당 URL로 새 HTTP요청을 보낸다\r\n                    // 사용자가 한 것은 아니지만 새 요청이 발생\r\n                    window.location.href=\"/login\";\r\n                }\r\n            })\r\n}\r\n\r\n// userDTO 매개변수에 담긴 내용\r\n// {username:username, password:password}\r\nexport function signin(userDTO) {\r\n    return call(\"/auth/signin\", \"POST\", userDTO)\r\n            .then(response => {\r\n                console.log(\"response : \" + response);\r\n                // alert(\"로그인 토큰 :\" + response.token);\r\n                if(response.token) {\r\n                    // 로컬 스토리지에 토큰 저장\r\n                    localStorage.setItem(\"ACCESS_TOKEN\", response.token);\r\n                    // todo 화면으로 리다이렉트\r\n                    window.location.href=\"/\";\r\n                } else {\r\n                    window.location.href=\"/login\";\r\n                }\r\n            })\r\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,eAAe;;AAE5C;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC3BC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAG;IACN,cAAc,EAAC;EACnB;AACJ,CAAC,CAAC;;AAEF;;AAEA;AACA;AACAH,SAAS,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;EACzC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAClD,IAAGF,KAAK,EAAE;IACND,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EACpD;EACA,OAAOD,MAAM;AACjB,CAAC,CAAC;;AAEF;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASK,IAAIA,CAACC,GAAG,EAAEC,MAAM,EAAET,OAAO,EAAE;EAEvC,IAAIF,OAAO,GAAG,IAAIY,OAAO,CAAC;IACtB,cAAc,EAAC;EACnB,CAAC,CAAC;;EAEF;EACA,MAAMC,YAAY,GAAGP,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EACzD,IAAGM,YAAY,IAAIA,YAAY,KAAK,IAAI,EAAE;IACtCb,OAAO,CAACc,MAAM,CAAC,eAAe,EAAE,SAAS,GAAGD,YAAY,CAAC;EAC7D;;EAEA;EACA;;EAEA;EACA,IAAIE,OAAO,GAAG;IACVC,GAAG,EAAGpB,YAAY,GAAGc,GAAG;IACxBC,MAAM,EAAGA,MAAM;IACfX,OAAO,EAAGA;EACd,CAAC;;EAED;EACA,IAAGE,OAAO,EAAE;IACR;IACAa,OAAO,CAACE,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACjB,OAAO,CAAC;EAC1C;;EAEA;EACA,OAAOP,KAAK,CAACoB,OAAO;EACZ;EAAA,CACCK,IAAI,CAACC,QAAQ,IAAI;IACdC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACJ,IAAI,CAAC;IAC1B,OAAOI,QAAQ,CAACJ,IAAI;EACxB,CAAC,CAAC,CACDO,KAAK,CAACC,KAAK,IAAI;IACZH,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEE,KAAK,CAAC;IAC7B,IAAGA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;MACrB;MACA;MACA;MACAC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAC,QAAQ;IACjC;EACJ,CAAC,CAAC;AACd;;AAEA;AACA;AACA,OAAO,SAASC,MAAMA,CAACC,OAAO,EAAE;EAC5B,OAAOtB,IAAI,CAAC,cAAc,EAAE,MAAM,EAAEsB,OAAO,CAAC,CACnCX,IAAI,CAACC,QAAQ,IAAI;IACdC,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGF,QAAQ,CAAC;IACrC;IACA,IAAGA,QAAQ,CAAChB,KAAK,EAAE;MACf;MACAC,YAAY,CAAC0B,OAAO,CAAC,cAAc,EAAEX,QAAQ,CAAChB,KAAK,CAAC;MACpD;MACAsB,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAC,GAAG;IAC5B,CAAC,MAAM;MACHF,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAC,QAAQ;IACjC;EACJ,CAAC,CAAC;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}