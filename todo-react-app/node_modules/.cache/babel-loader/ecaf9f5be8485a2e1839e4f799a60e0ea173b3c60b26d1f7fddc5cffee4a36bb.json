{"ast":null,"code":"import axios from \"axios\";\nimport { API_BASE_URL } from \"../api-config\";\n\n// 1. axios 객체 생성\n// 바뀌지 않는 공통적인 기본 설정\n// create() : axios가 제공하는 팩토리 함수\n// 팩토리 패턴 : 여러 곳에서 api의 호출이 필요할 때, 매번 같은 설정을 반복하지 않고 한 번에 설정하는 방식\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// 인터셉터 : 요청 전/후에 공통 로직을 삽입할 수 있는 로직으로, 인증 토큰 첨부나 에러 일괄 처리에 핵심적으로 사용\n\n// 2. 요청 인터셉터로 토큰 자동 첨부\n// interceptors.request.use(onFulfilled, onRejected) : 역할이 서버로 전송되기 전에 호출 될 콜백함수를 등록\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"ACCESS_TOKEN\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// 3. 응답 인터셉터로 403 처리\n// interceptors.response.use(onFulfilled, onRejected) : 서버로부터 응답을 받은 직후에 호출될 콜백을 등록한다\n// ?.(옵셔널 체이닝) : null이나 undefined가 있을 수 있는 객체의 프로퍼티로 접근할 때,\n// 에러를 방지하고 안전하게 값을 조회하거나 호출할 수 있게 해준다\n// null 또는 undefined일 경우 즉시 undefined를 반환하고 그 뒤 연산은 생략한다\napiClient.interceptors.response.use(response => response, error => {\n  var _error$response;\n  const status = (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status;\n  if (status === 403) {\n    window.location.href = '/login';\n    return Promise.resolve({\n      data: null,\n      status: status\n    });\n  }\n  // 이 에러가 다음 catch블록이나 호출 측으로 전달되도록 한다\n  return Promise.reject(error);\n});\n\n// 요청하는 메서드를 만들 것\n// api : 호출할 api 경로(/todo, /users)\n// method : HTTP메서드(GET, POST, PUT, DELETE)\n// request : 요청에 담을 데이터(주로 POST, PUT에서 사용)\nexport function call(api, method, request) {\n  return apiClient({\n    url: api,\n    method,\n    data: request || undefined\n  }).then(res => res.data);\n}\n\n// userDTO 매개변수에 담긴 내용\n// {username:username, password:password}\nexport function signin(userDTO) {\n  return call(\"/auth/signin\", \"POST\", userDTO).then(response => {\n    console.log(\"response : \" + response);\n    // alert(\"로그인 토큰 :\" + response.token);\n    if (response.token) {\n      // 로컬 스토리지에 토큰 저장\n      localStorage.setItem(\"ACCESS_TOKEN\", response.token);\n      // todo 화면으로 리다이렉트\n      window.location.href = \"/\";\n    } else {\n      window.location.href = \"/login\";\n    }\n  });\n}\nexport function signout() {\n  // 로컬 스토리지에 있는 토큰을 없앤다\n  localStorage.setItem(\"ACCESS_TOKEN\", null);\n  window.location.href = '/login';\n}\n\n// 계정생성\nexport function signup(userDTO) {\n  return call(\"/auth/signup\", \"POST\", userDTO);\n}","map":{"version":3,"names":["axios","API_BASE_URL","apiClient","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","error","_error$response","status","window","location","href","Promise","resolve","data","reject","call","api","method","url","undefined","then","res","signin","userDTO","console","log","setItem","signout","signup"],"sources":["D:/full_stack_osh/4. react/todo-react-app/src/service/ApiService.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { API_BASE_URL } from \"../api-config\";\r\n\r\n// 1. axios 객체 생성\r\n// 바뀌지 않는 공통적인 기본 설정\r\n// create() : axios가 제공하는 팩토리 함수\r\n// 팩토리 패턴 : 여러 곳에서 api의 호출이 필요할 때, 매번 같은 설정을 반복하지 않고 한 번에 설정하는 방식\r\nconst apiClient = axios.create({\r\n    baseURL: API_BASE_URL,\r\n    headers : {\r\n        \"Content-Type\":\"application/json\"\r\n    }\r\n})\r\n\r\n// 인터셉터 : 요청 전/후에 공통 로직을 삽입할 수 있는 로직으로, 인증 토큰 첨부나 에러 일괄 처리에 핵심적으로 사용\r\n\r\n// 2. 요청 인터셉터로 토큰 자동 첨부\r\n// interceptors.request.use(onFulfilled, onRejected) : 역할이 서버로 전송되기 전에 호출 될 콜백함수를 등록\r\napiClient.interceptors.request.use(config => {\r\n    const token = localStorage.getItem(\"ACCESS_TOKEN\");\r\n    if(token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n});\r\n\r\n// 3. 응답 인터셉터로 403 처리\r\n// interceptors.response.use(onFulfilled, onRejected) : 서버로부터 응답을 받은 직후에 호출될 콜백을 등록한다\r\n// ?.(옵셔널 체이닝) : null이나 undefined가 있을 수 있는 객체의 프로퍼티로 접근할 때,\r\n// 에러를 방지하고 안전하게 값을 조회하거나 호출할 수 있게 해준다\r\n// null 또는 undefined일 경우 즉시 undefined를 반환하고 그 뒤 연산은 생략한다\r\napiClient.interceptors.response.use(response => response,\r\n    error => {\r\n        const status = error.response?.status;\r\n        if(status === 403) {\r\n            window.location.href='/login';\r\n            return Promise.resolve({data:null, status: status})\r\n        }\r\n        // 이 에러가 다음 catch블록이나 호출 측으로 전달되도록 한다\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// 요청하는 메서드를 만들 것\r\n// api : 호출할 api 경로(/todo, /users)\r\n// method : HTTP메서드(GET, POST, PUT, DELETE)\r\n// request : 요청에 담을 데이터(주로 POST, PUT에서 사용)\r\nexport function call(api, method, request) {\r\n    return apiClient({\r\n        url : api,\r\n        method,\r\n        data : request || undefined,\r\n    })\r\n        .then(res => res.data);\r\n}\r\n\r\n// userDTO 매개변수에 담긴 내용\r\n// {username:username, password:password}\r\nexport function signin(userDTO) {\r\n    return call(\"/auth/signin\", \"POST\", userDTO)\r\n            .then(response => {\r\n                console.log(\"response : \" + response);\r\n                // alert(\"로그인 토큰 :\" + response.token);\r\n                if(response.token) {\r\n                    // 로컬 스토리지에 토큰 저장\r\n                    localStorage.setItem(\"ACCESS_TOKEN\", response.token);\r\n                    // todo 화면으로 리다이렉트\r\n                    window.location.href=\"/\";\r\n                } else {\r\n                    window.location.href=\"/login\";\r\n                }\r\n            })\r\n}\r\n\r\nexport function signout() {\r\n    // 로컬 스토리지에 있는 토큰을 없앤다\r\n    localStorage.setItem(\"ACCESS_TOKEN\", null);\r\n    window.location.href='/login';\r\n}\r\n\r\n// 계정생성\r\nexport function signup(userDTO) {\r\n    return call(\"/auth/signup\", \"POST\", userDTO);\r\n}\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,eAAe;;AAE5C;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC3BC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAG;IACN,cAAc,EAAC;EACnB;AACJ,CAAC,CAAC;;AAEF;;AAEA;AACA;AACAH,SAAS,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;EACzC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAClD,IAAGF,KAAK,EAAE;IACND,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EACpD;EACA,OAAOD,MAAM;AACjB,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACAP,SAAS,CAACI,YAAY,CAACQ,QAAQ,CAACN,GAAG,CAACM,QAAQ,IAAIA,QAAQ,EACpDC,KAAK,IAAI;EAAA,IAAAC,eAAA;EACL,MAAMC,MAAM,IAAAD,eAAA,GAAGD,KAAK,CAACD,QAAQ,cAAAE,eAAA,uBAAdA,eAAA,CAAgBC,MAAM;EACrC,IAAGA,MAAM,KAAK,GAAG,EAAE;IACfC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAC,QAAQ;IAC7B,OAAOC,OAAO,CAACC,OAAO,CAAC;MAACC,IAAI,EAAC,IAAI;MAAEN,MAAM,EAAEA;IAAM,CAAC,CAAC;EACvD;EACA;EACA,OAAOI,OAAO,CAACG,MAAM,CAACT,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,SAASU,IAAIA,CAACC,GAAG,EAAEC,MAAM,EAAEpB,OAAO,EAAE;EACvC,OAAOL,SAAS,CAAC;IACb0B,GAAG,EAAGF,GAAG;IACTC,MAAM;IACNJ,IAAI,EAAGhB,OAAO,IAAIsB;EACtB,CAAC,CAAC,CACGC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACR,IAAI,CAAC;AAC9B;;AAEA;AACA;AACA,OAAO,SAASS,MAAMA,CAACC,OAAO,EAAE;EAC5B,OAAOR,IAAI,CAAC,cAAc,EAAE,MAAM,EAAEQ,OAAO,CAAC,CACnCH,IAAI,CAAChB,QAAQ,IAAI;IACdoB,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGrB,QAAQ,CAAC;IACrC;IACA,IAAGA,QAAQ,CAACJ,KAAK,EAAE;MACf;MACAC,YAAY,CAACyB,OAAO,CAAC,cAAc,EAAEtB,QAAQ,CAACJ,KAAK,CAAC;MACpD;MACAQ,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAC,GAAG;IAC5B,CAAC,MAAM;MACHF,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAC,QAAQ;IACjC;EACJ,CAAC,CAAC;AACd;AAEA,OAAO,SAASiB,OAAOA,CAAA,EAAG;EACtB;EACA1B,YAAY,CAACyB,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;EAC1ClB,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAC,QAAQ;AACjC;;AAEA;AACA,OAAO,SAASkB,MAAMA,CAACL,OAAO,EAAE;EAC5B,OAAOR,IAAI,CAAC,cAAc,EAAE,MAAM,EAAEQ,OAAO,CAAC;AAChD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}