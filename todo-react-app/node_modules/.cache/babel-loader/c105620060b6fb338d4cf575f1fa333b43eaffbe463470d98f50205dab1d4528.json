{"ast":null,"code":"import{useEffect,useState}from'react';import logo from'./logo.svg';import'./App.css';import Todo from'./Todo';//Todo 컴포넌트를 사용하기 위해 import\nimport{List,Paper,Container,AppBar,Toolbar,Grid,Typography,Button}from'@mui/material';import AddTodo from'./AddTodo';import axios from'axios';import{call,signout}from'./service/ApiService';// Container\n// 레이아웃의 가로 폭을 제한하고, 중앙 정렬 및 기본 패딩을 자동으로 적용해주는 컴포넌트\n// 주요 props\n// maxWidth : 최대 너비를 지정 (xs, sm, md, lg, xl, false)\n// fixed : maxWidth와 관계없이 항상 고정폭으로 제공\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){// 하나의 할 일을 객체로 관리할 것이다\n// id, title, done\nconst[items,setItem]=useState([]);const[loading,setLoading]=useState(true);// 최초 렌더링 시 한번만 실행\nuseEffect(()=>{// 조회\ncall(\"/todo\",\"GET\",null).then(result=>{setItem(result.data);setLoading(false);});},[]);const add=item=>{// DB에 추가하기 위해 백엔드로 데이터를 전달\ncall(\"/todo\",\"POST\",item)// 데이터를 추가하고, 전체 데이터를 반환받아서 state에 세팅을 하여 다시 렌더링이 일어난다\n.then(result=>setItem(result.data));};// 삭제를 해주는 deleteItem()함수 만들기\n// useState(), 기능을 하는 함수를 App.js에 만든 이유\n// 전체 Todo리스트는 App.js에서 관리를 하기 때문\n// DB에서의 삭제는 delete from 테이블 where id = 0;...\nconst deleteItem=item=>{call(\"/todo\",\"DELETE\",item).then(result=>setItem(result.data));};const editItem=item=>{call(\"/todo\",\"PUT\",item).then(result=>setItem(result.data));};// react는 key속성에 들어있는 값을 참고해서, 리스트의 요소가 변경될 경우 어떤 요소가 변경되었는지\n// 빠르게 파악할 수 있다.\nconst todoItems=(items===null||items===void 0?void 0:items.length)>0&&/*#__PURE__*/// Paper 컴포넌트\n// 종이같은 표면 효과를 제공하는 컨테이너 컴포넌트\n// elevation(그림자 깊이)를 통해 높낮이를 표현하고\n// 배경색과 그림자 효과를 콘텐츠를 돋보이게 한다\n_jsx(Paper,{style:{margin:16},children:/*#__PURE__*/_jsxs(List,{children:[\"  \",items.map(item=>/*#__PURE__*/_jsx(Todo,{item:item,deleteItem:deleteItem,editItem:editItem},item.id))]})});// 네비게이션 바\nlet navigationBar=/*#__PURE__*/_jsx(AppBar,{position:\"static\",children:/*#__PURE__*/_jsx(Toolbar,{children:/*#__PURE__*/_jsxs(Grid,{justifyContent:\"space-between\",container:true,sx:{flexGrow:1},children:[/*#__PURE__*/_jsx(Grid,{item:true,children:/*#__PURE__*/_jsx(Typography,{variant:\"h6\",children:\"\\uC624\\uB298\\uC758 \\uD560\\uC77C\"})}),/*#__PURE__*/_jsx(Grid,{item:true,children:/*#__PURE__*/_jsx(Button,{color:\"inherit\",raised:true,onClick:signout,children:\"\\uB85C\\uADF8\\uC544\\uC6C3\"})})]})})});// 로딩 중이 아닐 때 렌더링할 부분\nlet todoListPage=/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[navigationBar,/*#__PURE__*/_jsxs(Container,{maxWidth:\"md\",children:[/*#__PURE__*/_jsx(AddTodo,{add:add}),/*#__PURE__*/_jsx(\"div\",{className:\"TodoList\",children:todoItems})]})]});// 로딩 중일 때 렌더링 할 부분\nlet loadingPage=/*#__PURE__*/_jsx(\"h1\",{children:\"\\uBD88\\uB7EC\\uC624\\uB294 \\uC911...\"});let content=loadingPage;if(!loading){content=todoListPage;}return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:content});}export default App;","map":{"version":3,"names":["useEffect","useState","logo","Todo","List","Paper","Container","AppBar","Toolbar","Grid","Typography","Button","AddTodo","axios","call","signout","jsx","_jsx","jsxs","_jsxs","App","items","setItem","loading","setLoading","then","result","data","add","item","deleteItem","editItem","todoItems","length","style","margin","children","map","id","navigationBar","position","justifyContent","container","sx","flexGrow","variant","color","raised","onClick","todoListPage","className","maxWidth","loadingPage","content"],"sources":["D:/full_stack_osh/4. react/todo-react-app/src/App.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Todo from './Todo'; //Todo 컴포넌트를 사용하기 위해 import\r\nimport { List, Paper, Container, AppBar, Toolbar, Grid, Typography, Button } from '@mui/material'\r\nimport AddTodo from './AddTodo';\r\nimport axios from 'axios';\r\nimport { call, signout } from './service/ApiService';\r\n\r\n// Container\r\n// 레이아웃의 가로 폭을 제한하고, 중앙 정렬 및 기본 패딩을 자동으로 적용해주는 컴포넌트\r\n\r\n// 주요 props\r\n// maxWidth : 최대 너비를 지정 (xs, sm, md, lg, xl, false)\r\n// fixed : maxWidth와 관계없이 항상 고정폭으로 제공\r\n\r\n\r\nfunction App() {\r\n  // 하나의 할 일을 객체로 관리할 것이다\r\n  // id, title, done\r\n  const [items, setItem] = useState([])\r\n  const [loading, setLoading] = useState(true);\r\n  \r\n  // 최초 렌더링 시 한번만 실행\r\n  useEffect(() => {\r\n    // 조회\r\n    call(\"/todo\", \"GET\", null)\r\n      .then(result => {\r\n        setItem(result.data)\r\n        setLoading(false)\r\n      });\r\n  }, []);\r\n  \r\n\r\n  const add = (item) => {\r\n    // DB에 추가하기 위해 백엔드로 데이터를 전달\r\n    call(\"/todo\", \"POST\", item)\r\n    // 데이터를 추가하고, 전체 데이터를 반환받아서 state에 세팅을 하여 다시 렌더링이 일어난다\r\n      .then(result => setItem(result.data));\r\n  }\r\n\r\n  // 삭제를 해주는 deleteItem()함수 만들기\r\n  // useState(), 기능을 하는 함수를 App.js에 만든 이유\r\n  // 전체 Todo리스트는 App.js에서 관리를 하기 때문\r\n  // DB에서의 삭제는 delete from 테이블 where id = 0;...\r\n  const deleteItem = (item) => {\r\n    call(\"/todo\", \"DELETE\", item)\r\n      .then(result => setItem(result.data));\r\n  }\r\n\r\n  const editItem = (item) => {\r\n    call(\"/todo\", \"PUT\", item)\r\n      .then(result => setItem(result.data));\r\n  }\r\n\r\n\r\n  // react는 key속성에 들어있는 값을 참고해서, 리스트의 요소가 변경될 경우 어떤 요소가 변경되었는지\r\n  // 빠르게 파악할 수 있다.\r\n  const todoItems = items?.length > 0 && \r\n    // Paper 컴포넌트\r\n    // 종이같은 표면 효과를 제공하는 컨테이너 컴포넌트\r\n    // elevation(그림자 깊이)를 통해 높낮이를 표현하고\r\n    // 배경색과 그림자 효과를 콘텐츠를 돋보이게 한다\r\n    <Paper style={{margin: 16}}>\r\n       <List>  {/* 일련의 항복을 세로로 나열하는 컨테이너 역할 */}\r\n        {items.map((item) => \r\n        <Todo item={item} key={item.id} deleteItem={deleteItem} editItem={editItem} />)}\r\n      </List>\r\n    </Paper>\r\n\r\n  // 네비게이션 바\r\n  let navigationBar = (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <Grid justifyContent=\"space-between\" container sx={{ flexGrow : 1 }}>\r\n          <Grid item>\r\n            <Typography variant='h6'>오늘의 할일</Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button color='inherit' raised onClick={ signout }>\r\n              로그아웃\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Toolbar>\r\n    </AppBar>\r\n  )\r\n\r\n  // 로딩 중이 아닐 때 렌더링할 부분\r\n  let todoListPage = (\r\n    <div className=\"App\">\r\n      { navigationBar }\r\n      <Container maxWidth=\"md\">\r\n        {/* AddTodo에 add함수를 전달 {add : function add(item) {~}} */}\r\n        <AddTodo add={ add }/>\r\n        <div className='TodoList'>\r\n          { todoItems }\r\n        </div>\r\n      </Container>\r\n    </div>\r\n  );\r\n\r\n  // 로딩 중일 때 렌더링 할 부분\r\n  let loadingPage = <h1>불러오는 중...</h1>\r\n  let content = loadingPage;\r\n\r\n  if(!loading) {\r\n    content = todoListPage;\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {content}\r\n    </div>\r\n  );\r\n  \r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}