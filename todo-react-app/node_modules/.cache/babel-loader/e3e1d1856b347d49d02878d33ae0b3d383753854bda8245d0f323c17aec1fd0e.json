{"ast":null,"code":"var _jsxFileName = \"D:\\\\full_stack_osh\\\\4. react\\\\todo-react-app\\\\src\\\\Todo.js\",\n  _s = $RefreshSig$();\n// 현재 파일에서는 checkBox와 label 컴포넌트를 만들어 보자\n\nimport { useState } from \"react\";\nimport { ListItem, ListItemText, InputBase, Checkbox, ListItemSecondaryAction, IconButton } from '@mui/material';\nimport DeleteOutlined from \"@mui/icons-material/DeleteOutlined\";\n\n// ListItemSecondaryAction\n// ListItem 내부에서 텍스트나 아이콘 이후에 보조 액션 영역을 오른쪽 끝에 고정배치 해준다\n// 반드시 ListItem의 자식으로만 사용해야한다\n\n// IconButton\n// 아이콘을 클릭 가능한 버튼으로 만들어주는 컴포넌트이다\n\n// DeleteOutlined\n// MUI 아이콘 라이브러리에 포함된 휴지통 아이콘 컴포넌트이다\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet Todo = props => {\n  _s();\n  // App.js에서 받은 한가지 할일 목록\n  const [item, setItem] = useState(props.item);\n  const [readOnly, setReadOnly] = useState(true);\n  const editItem = props.editItem;\n\n  // true -> false로 바꾸는 turnOffReadOnly함수 추가\n  const turnOffReadOnly = () => {\n    setReadOnly(false);\n  };\n\n  // 변경을 감지하는 함수\n  // const handleChange = (e) => {\n  //     setItem({\n  //         ...item,\n  //         title:e.target.value,\n  //     })\n  // }\n\n  // 수정\n  // 타이틀 변경을 위해 input의 필드에서 사용자가 입력을 받아올 때\n  // editEventHandler()에서 item을 바로 넘겨버리면 한글자씩 입력할 때마다\n  // HTTP 요청을 보내게 된다\n  // 이는 비효율적이기 때문에 수정을 완료한 시점에서 HTTP요청을 보내야 한다\n  // 입력이 끝나서 수정이 불가능한 샅애로 바뀌는 시점에\n  const editItemHandler = e => {\n    item.title = e.target.value;\n    editItem();\n  };\n  const turnOnReadOnly = e => {\n    if (e.key == 'Enter') {\n      setReadOnly(true);\n    }\n  };\n\n  // 체크박스 변경함수\n  const checkBoxEventHandler = e => {\n    item.done = e.target.checked;\n    editItem();\n  };\n\n  // 삭제함수\n  const deleteItem = props.deleteItem;\n  const deleteEventHandler = () => {\n    deleteItem(item);\n  };\n  return (\n    /*#__PURE__*/\n    // html 코드가 들어가는 부분\n    // 속성을 쓸 때 카멜케이스로 작성하기\n    // onclick -> onClick\n    // class -> className\n    _jsxDEV(ListItem, {\n      children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n        checked: item.done,\n        onChange: checkBoxEventHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n        children: /*#__PURE__*/_jsxDEV(InputBase, {\n          inputProps: {\n            \"aria-label\": \"naked\"\n          },\n          readOnly: readOnly,\n          onClick: turnOffReadOnly,\n          onChange: editItemHandler,\n          onKeyDown: turnOnReadOnly,\n          type: \"text\",\n          id: item.id,\n          name: item.id,\n          value: item.title,\n          multiline: true,\n          fullWidth: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ListItemSecondaryAction, {\n        children: /*#__PURE__*/_jsxDEV(IconButton, {\n          \"aria-label\": \"Delete Todo\",\n          onClick: deleteEventHandler,\n          children: [/*#__PURE__*/_jsxDEV(DeleteOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 21\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this)\n  );\n};\n_s(Todo, \"gX+eXC56e0NjrYZrTR0Au2i1I3Y=\");\n_c = Todo;\nexport default Todo;\nvar _c;\n$RefreshReg$(_c, \"Todo\");","map":{"version":3,"names":["useState","ListItem","ListItemText","InputBase","Checkbox","ListItemSecondaryAction","IconButton","DeleteOutlined","jsxDEV","_jsxDEV","Todo","props","_s","item","setItem","readOnly","setReadOnly","editItem","turnOffReadOnly","editItemHandler","e","title","target","value","turnOnReadOnly","key","checkBoxEventHandler","done","checked","deleteItem","deleteEventHandler","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","inputProps","onClick","onKeyDown","type","id","name","multiline","fullWidth","_c","$RefreshReg$"],"sources":["D:/full_stack_osh/4. react/todo-react-app/src/Todo.js"],"sourcesContent":["// 현재 파일에서는 checkBox와 label 컴포넌트를 만들어 보자\r\n\r\nimport { useState } from \"react\";\r\nimport { ListItem, ListItemText, InputBase, Checkbox, ListItemSecondaryAction, IconButton } from '@mui/material'\r\nimport DeleteOutlined from \"@mui/icons-material/DeleteOutlined\";\r\n\r\n// ListItemSecondaryAction\r\n// ListItem 내부에서 텍스트나 아이콘 이후에 보조 액션 영역을 오른쪽 끝에 고정배치 해준다\r\n// 반드시 ListItem의 자식으로만 사용해야한다\r\n\r\n// IconButton\r\n// 아이콘을 클릭 가능한 버튼으로 만들어주는 컴포넌트이다\r\n\r\n// DeleteOutlined\r\n// MUI 아이콘 라이브러리에 포함된 휴지통 아이콘 컴포넌트이다\r\n\r\nlet Todo = (props) => {\r\n\r\n    // App.js에서 받은 한가지 할일 목록\r\n    const [item, setItem] = useState(props.item);\r\n    const [readOnly, setReadOnly] = useState(true);\r\n    const editItem = props.editItem;\r\n\r\n    // true -> false로 바꾸는 turnOffReadOnly함수 추가\r\n    const turnOffReadOnly = () => {\r\n        setReadOnly(false);\r\n    }\r\n    \r\n    // 변경을 감지하는 함수\r\n    // const handleChange = (e) => {\r\n    //     setItem({\r\n    //         ...item,\r\n    //         title:e.target.value,\r\n    //     })\r\n    // }\r\n\r\n    // 수정\r\n    // 타이틀 변경을 위해 input의 필드에서 사용자가 입력을 받아올 때\r\n    // editEventHandler()에서 item을 바로 넘겨버리면 한글자씩 입력할 때마다\r\n    // HTTP 요청을 보내게 된다\r\n    // 이는 비효율적이기 때문에 수정을 완료한 시점에서 HTTP요청을 보내야 한다\r\n    // 입력이 끝나서 수정이 불가능한 샅애로 바뀌는 시점에\r\n    const editItemHandler = (e) => {\r\n        item.title = e.target.value;\r\n        editItem();\r\n    }\r\n    \r\n    const turnOnReadOnly = (e) => {\r\n        if(e.key == 'Enter') {\r\n            setReadOnly(true);\r\n        }\r\n    }\r\n\r\n    // 체크박스 변경함수\r\n    const checkBoxEventHandler = (e) => {\r\n        item.done = e.target.checked;\r\n        editItem();\r\n    }\r\n\r\n    // 삭제함수\r\n    const deleteItem = props.deleteItem;\r\n\r\n    const deleteEventHandler = () => {\r\n        deleteItem(item);\r\n    }\r\n\r\n    return (\r\n        // html 코드가 들어가는 부분\r\n        // 속성을 쓸 때 카멜케이스로 작성하기\r\n        // onclick -> onClick\r\n        // class -> className\r\n        <ListItem>\r\n            <Checkbox checked={item.done} onChange={checkBoxEventHandler}/>\r\n            <ListItemText>\r\n                <InputBase\r\n                    inputProps={{\"aria-label\" : \"naked\"}}\r\n                    readOnly={readOnly}\r\n                    onClick={turnOffReadOnly}\r\n                    onChange={editItemHandler}\r\n                    onKeyDown={turnOnReadOnly}\r\n                    type=\"text\"\r\n                    id={item.id} \r\n                    name={item.id}\r\n                    value={item.title}\r\n                    multiline={true}\r\n                    fullWidth={true}\r\n                />\r\n            </ListItemText>\r\n            <ListItemSecondaryAction>\r\n                <IconButton aria-label=\"Delete Todo\" onClick={deleteEventHandler}> \r\n                    <DeleteOutlined /> {/* 휴지통 버튼 */}\r\n                </IconButton>\r\n            </ListItemSecondaryAction>\r\n        </ListItem>\r\n    )\r\n}\r\n\r\nexport default Todo;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}