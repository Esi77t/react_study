{"ast":null,"code":"import{useState}from'react';import{Button,Grid,TextField}from'@mui/material';// Button\n// 다양한 스타일(Variant) : text, contained, outlined\n// 색상(Color),\n// 크기(Size)를 지원하는 버튼 컴포넌트\n// Grid2\n// CSS Grid 레이아웃 기반의 그리드 시스템\n// Flexbox 기반의 기존 Grid보다 행, 열 제어가 직관적이고, rowSpacing, columnSpacing으로 간격을 조절할 수 있다\n// 주요 props\n// container : 그리드 컨테이너로 설정\n// item : 그리드 아이템으로 설정 (생략해도 자동 감지)\n// xs(0), sm(600), md(900), lg(1200), xl(1536) : 각 브레이킹포인트 별 차지할 컬럼수 (기본 12분할)\n// 브레이킹 포인트 : 화면 너비 기준값\n// columns : 총 컬럼 수 조정(기본 12)\n// rowSpacing, columnSpacing : 행, 열 간격\n// TextField\n// 입력(input), 라벨(label), 헬퍼 텍스트(helperText), 에러 표시(error)를 한번에 처리 해줄 수 있는 컴포넌트\n// 주요 props\n// variant : 스타일 설정\n// label : 라벨 텍스트\n// helperText : 입력 하단 도움 텍스트\n// error : 에러 상태표시 true만 빨간색으로 강조\n// fullWidth : 가로 100% 차지\n// multiline : 여러줄 입력 여부\n// rows : multiline 일 때 보이는 줄 수\n// type : text, password, email 등 입력 타입\n// react에서 style을 줄 때는 js객체형식으로 줘야한다\n// props로 넘어온 내용을 받아서 사용할 준비가 끝남\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const AddTodo=_ref=>{let{add}=_ref;const[item,setItem]=useState({title:\"\"});const onInputChange=e=>{setItem({title:e.target.value});console.log({title:e.target.value});};const onButtonClick=()=>{if(item.title.trim()===''){alert('내용을 입력하세요');return;// 내용을 진행하지 않고 함수를 빠져나간다\n}// props로 넘겨받은 add함수를 호출\nadd(item);// add({title:'내용'})\nsetItem({title:\"\"});// 함수에 전달을 하고 나면 입력 필드를 지워준다\n};const enterKeyEventHandler=e=>{if(e.key==\"Enter\"){onButtonClick();}};return/*#__PURE__*/_jsxs(Grid,{container:true,style:{marginTop:20},justifyContent:\"center\",alignContent:\"center\",children:[/*#__PURE__*/_jsx(Grid,{xs:11,md:11,item:true,style:{paddingRight:16},children:/*#__PURE__*/_jsx(TextField,{placeholder:\"Add Todo here\",fullWidth:true,value:item.title,onChange:onInputChange,onKeyDown:enterKeyEventHandler})}),/*#__PURE__*/_jsx(Grid,{children:/*#__PURE__*/_jsx(Button,{fullWidth:true,style:{height:'100%'},color:\"secondary\",variant:\"outlined\",onClick:onButtonClick,children:\" + \"})})]});};export default AddTodo;","map":{"version":3,"names":["useState","Button","Grid","TextField","jsx","_jsx","jsxs","_jsxs","AddTodo","_ref","add","item","setItem","title","onInputChange","e","target","value","console","log","onButtonClick","trim","alert","enterKeyEventHandler","key","container","style","marginTop","justifyContent","alignContent","children","xs","md","paddingRight","placeholder","fullWidth","onChange","onKeyDown","height","color","variant","onClick"],"sources":["D:/full_stack_osh/4. react/todo-react-app/src/AddTodo.js"],"sourcesContent":["import { useState } from 'react';\r\nimport { Button, Grid, TextField } from '@mui/material';\r\n\r\n// Button\r\n// 다양한 스타일(Variant) : text, contained, outlined\r\n// 색상(Color),\r\n// 크기(Size)를 지원하는 버튼 컴포넌트\r\n\r\n// Grid2\r\n// CSS Grid 레이아웃 기반의 그리드 시스템\r\n// Flexbox 기반의 기존 Grid보다 행, 열 제어가 직관적이고, rowSpacing, columnSpacing으로 간격을 조절할 수 있다\r\n// 주요 props\r\n// container : 그리드 컨테이너로 설정\r\n// item : 그리드 아이템으로 설정 (생략해도 자동 감지)\r\n// xs(0), sm(600), md(900), lg(1200), xl(1536) : 각 브레이킹포인트 별 차지할 컬럼수 (기본 12분할)\r\n// 브레이킹 포인트 : 화면 너비 기준값\r\n// columns : 총 컬럼 수 조정(기본 12)\r\n// rowSpacing, columnSpacing : 행, 열 간격\r\n\r\n// TextField\r\n// 입력(input), 라벨(label), 헬퍼 텍스트(helperText), 에러 표시(error)를 한번에 처리 해줄 수 있는 컴포넌트\r\n// 주요 props\r\n// variant : 스타일 설정\r\n// label : 라벨 텍스트\r\n// helperText : 입력 하단 도움 텍스트\r\n// error : 에러 상태표시 true만 빨간색으로 강조\r\n// fullWidth : 가로 100% 차지\r\n// multiline : 여러줄 입력 여부\r\n// rows : multiline 일 때 보이는 줄 수\r\n// type : text, password, email 등 입력 타입\r\n\r\n// react에서 style을 줄 때는 js객체형식으로 줘야한다\r\n\r\n// props로 넘어온 내용을 받아서 사용할 준비가 끝남\r\nconst AddTodo = ({add}) => {\r\n\r\n    const [item, setItem] = useState({title:\"\"});\r\n\r\n    const onInputChange = (e) => {\r\n        setItem({title:e.target.value});\r\n        console.log({title:e.target.value});\r\n    }\r\n\r\n    const onButtonClick = () => {\r\n        if(item.title.trim() === '') {\r\n            alert('내용을 입력하세요');\r\n            return; // 내용을 진행하지 않고 함수를 빠져나간다\r\n        }\r\n\r\n        // props로 넘겨받은 add함수를 호출\r\n        add(item); // add({title:'내용'})\r\n        setItem({title:\"\"}) // 함수에 전달을 하고 나면 입력 필드를 지워준다\r\n    }\r\n\r\n    const enterKeyEventHandler = (e) => {\r\n        if(e.key == \"Enter\") {\r\n            onButtonClick();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Grid \r\n            container\r\n            style={{marginTop: 20}}\r\n            justifyContent=\"center\"\r\n            alignContent=\"center\"\r\n        >\r\n            <Grid xs={11} md={11} item style ={{paddingRight : 16}}>\r\n                <TextField\r\n                    placeholder='Add Todo here'\r\n                    fullWidth\r\n                    value={item.title}\r\n                    onChange={onInputChange}\r\n                    onKeyDown={enterKeyEventHandler} />\r\n            </Grid>\r\n            <Grid>\r\n                <Button fullWidth\r\n                style={{height:'100%'}}\r\n                color='secondary'\r\n                variant='outlined'\r\n                onClick={onButtonClick}> + </Button>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default AddTodo;"],"mappings":"AAAA,OAASA,QAAQ,KAAQ,OAAO,CAChC,OAASC,MAAM,CAAEC,IAAI,CAAEC,SAAS,KAAQ,eAAe,CAEvD;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBACA,KAAM,CAAAC,OAAO,CAAGC,IAAA,EAAW,IAAV,CAACC,GAAG,CAAC,CAAAD,IAAA,CAElB,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGZ,QAAQ,CAAC,CAACa,KAAK,CAAC,EAAE,CAAC,CAAC,CAE5C,KAAM,CAAAC,aAAa,CAAIC,CAAC,EAAK,CACzBH,OAAO,CAAC,CAACC,KAAK,CAACE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAC/BC,OAAO,CAACC,GAAG,CAAC,CAACN,KAAK,CAACE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CACvC,CAAC,CAED,KAAM,CAAAG,aAAa,CAAGA,CAAA,GAAM,CACxB,GAAGT,IAAI,CAACE,KAAK,CAACQ,IAAI,CAAC,CAAC,GAAK,EAAE,CAAE,CACzBC,KAAK,CAAC,WAAW,CAAC,CAClB,OAAQ;AACZ,CAEA;AACAZ,GAAG,CAACC,IAAI,CAAC,CAAE;AACXC,OAAO,CAAC,CAACC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;AACxB,CAAC,CAED,KAAM,CAAAU,oBAAoB,CAAIR,CAAC,EAAK,CAChC,GAAGA,CAAC,CAACS,GAAG,EAAI,OAAO,CAAE,CACjBJ,aAAa,CAAC,CAAC,CACnB,CACJ,CAAC,CAED,mBACIb,KAAA,CAACL,IAAI,EACDuB,SAAS,MACTC,KAAK,CAAE,CAACC,SAAS,CAAE,EAAE,CAAE,CACvBC,cAAc,CAAC,QAAQ,CACvBC,YAAY,CAAC,QAAQ,CAAAC,QAAA,eAErBzB,IAAA,CAACH,IAAI,EAAC6B,EAAE,CAAE,EAAG,CAACC,EAAE,CAAE,EAAG,CAACrB,IAAI,MAACe,KAAK,CAAG,CAACO,YAAY,CAAG,EAAE,CAAE,CAAAH,QAAA,cACnDzB,IAAA,CAACF,SAAS,EACN+B,WAAW,CAAC,eAAe,CAC3BC,SAAS,MACTlB,KAAK,CAAEN,IAAI,CAACE,KAAM,CAClBuB,QAAQ,CAAEtB,aAAc,CACxBuB,SAAS,CAAEd,oBAAqB,CAAE,CAAC,CACrC,CAAC,cACPlB,IAAA,CAACH,IAAI,EAAA4B,QAAA,cACDzB,IAAA,CAACJ,MAAM,EAACkC,SAAS,MACjBT,KAAK,CAAE,CAACY,MAAM,CAAC,MAAM,CAAE,CACvBC,KAAK,CAAC,WAAW,CACjBC,OAAO,CAAC,UAAU,CAClBC,OAAO,CAAErB,aAAc,CAAAU,QAAA,CAAC,KAAG,CAAQ,CAAC,CAClC,CAAC,EACL,CAAC,CAEf,CAAC,CAED,cAAe,CAAAtB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}