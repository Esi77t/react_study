{"ast":null,"code":"import axios from\"axios\";import{API_BASE_URL}from\"../api-config\";// 1. axios 객체 생성\n// 바뀌지 않는 공통적인 기본 설정\n// create() : axios가 제공하는 팩토리 함수\n// 팩토리 패턴 : 여러 곳에서 api의 호출이 필요할 때, 매번 같은 설정을 반복하지 않고 한 번에 설정하는 방식\nconst apiClient=axios.create({baseURL:API_BASE_URL,headers:{\"Content-Type\":\"application/json\"}});// 인터셉터 : 요청 전/후에 공통 로직을 삽입할 수 있는 로직으로, 인증 토큰 첨부나 에러 일괄 처리에 핵심적으로 사용\n// 2. 요청 인터셉터로 토큰 자동 첨부\n// interceptors.request.use(onFulfilled, onRejected) : 역할이 서버로 전송되기 전에 호출 될 콜백함수를 등록\napiClient.interceptors.request.use(config=>{var _config$method;console.log(`${(_config$method=config.method)===null||_config$method===void 0?void 0:_config$method.toUpperCase()} ${config.baseURL}${config.url}`);const token=localStorage.getItem(\"ACCESS_TOKEN\");if(token){config.headers.Authorization=`Bearer ${token}`;}return config;});// 3. 응답 인터셉터로 403 처리\n// interceptors.response.use(onFulfilled, onRejected) : 서버로부터 응답을 받은 직후에 호출될 콜백을 등록한다\n// ?.(옵셔널 체이닝) : null이나 undefined가 있을 수 있는 객체의 프로퍼티로 접근할 때,\n// 에러를 방지하고 안전하게 값을 조회하거나 호출할 수 있게 해준다\n// null 또는 undefined일 경우 즉시 undefined를 반환하고 그 뒤 연산은 생략한다\napiClient.interceptors.response.use(response=>response,error=>{var _error$response;const status=(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status;if(status===403){window.location.href='/login';return Promise.resolve({data:null,status:status});}// 이 에러가 다음 catch블록이나 호출 측으로 전달되도록 한다\nreturn Promise.reject(error);});// 요청하는 메서드를 만들 것\n// api : 호출할 api 경로(/todo, /users)\n// method : HTTP메서드(GET, POST, PUT, DELETE)\n// request : 요청에 담을 데이터(주로 POST, PUT에서 사용)\nexport function call(api,method,request){return apiClient({url:api,method,data:request||undefined}).then(res=>res.data);}// userDTO 매개변수에 담긴 내용\n// {username:username, password:password}\nexport function signin(userDTO){return call(\"/auth/signin\",\"POST\",userDTO).then(response=>{console.log(\"response : \"+response);// alert(\"로그인 토큰 :\" + response.token);\nif(response.token){// 로컬 스토리지에 토큰 저장\nlocalStorage.setItem(\"ACCESS_TOKEN\",response.token);// todo 화면으로 리다이렉트\nwindow.location.href=\"/\";}else{window.location.href=\"/login\";}});}export function signout(){// 로컬 스토리지에 있는 토큰을 없앤다\nlocalStorage.setItem(\"ACCESS_TOKEN\",null);window.location.href='/login';}// 계정생성\nexport function signup(userDTO){return call(\"/auth/signup\",\"POST\",userDTO);}","map":{"version":3,"names":["axios","API_BASE_URL","apiClient","create","baseURL","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","token","localStorage","getItem","Authorization","response","error","_error$response","status","window","location","href","Promise","resolve","data","reject","call","api","undefined","then","res","signin","userDTO","setItem","signout","signup"],"sources":["D:/full_stack_osh/4. react/todo-react-app/src/service/ApiService.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { API_BASE_URL } from \"../api-config\";\r\n\r\n// 1. axios 객체 생성\r\n// 바뀌지 않는 공통적인 기본 설정\r\n// create() : axios가 제공하는 팩토리 함수\r\n// 팩토리 패턴 : 여러 곳에서 api의 호출이 필요할 때, 매번 같은 설정을 반복하지 않고 한 번에 설정하는 방식\r\nconst apiClient = axios.create({\r\n    baseURL: API_BASE_URL,\r\n    headers : {\r\n        \"Content-Type\":\"application/json\"\r\n    }\r\n})\r\n\r\n// 인터셉터 : 요청 전/후에 공통 로직을 삽입할 수 있는 로직으로, 인증 토큰 첨부나 에러 일괄 처리에 핵심적으로 사용\r\n\r\n// 2. 요청 인터셉터로 토큰 자동 첨부\r\n// interceptors.request.use(onFulfilled, onRejected) : 역할이 서버로 전송되기 전에 호출 될 콜백함수를 등록\r\napiClient.interceptors.request.use(config => {\r\n    console.log(`${config.method?.toUpperCase()} ${config.baseURL}${config.url}`);\r\n    const token = localStorage.getItem(\"ACCESS_TOKEN\");\r\n    if(token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n});\r\n\r\n// 3. 응답 인터셉터로 403 처리\r\n// interceptors.response.use(onFulfilled, onRejected) : 서버로부터 응답을 받은 직후에 호출될 콜백을 등록한다\r\n// ?.(옵셔널 체이닝) : null이나 undefined가 있을 수 있는 객체의 프로퍼티로 접근할 때,\r\n// 에러를 방지하고 안전하게 값을 조회하거나 호출할 수 있게 해준다\r\n// null 또는 undefined일 경우 즉시 undefined를 반환하고 그 뒤 연산은 생략한다\r\napiClient.interceptors.response.use(response => response,\r\n    error => {\r\n        const status = error.response?.status;\r\n        if(status === 403) {\r\n            window.location.href='/login';\r\n            return Promise.resolve({data:null, status: status})\r\n        }\r\n        // 이 에러가 다음 catch블록이나 호출 측으로 전달되도록 한다\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// 요청하는 메서드를 만들 것\r\n// api : 호출할 api 경로(/todo, /users)\r\n// method : HTTP메서드(GET, POST, PUT, DELETE)\r\n// request : 요청에 담을 데이터(주로 POST, PUT에서 사용)\r\nexport function call(api, method, request) {\r\n    return apiClient({\r\n        url : api,\r\n        method,\r\n        data : request || undefined,\r\n    })\r\n        .then(res => res.data);\r\n}\r\n\r\n// userDTO 매개변수에 담긴 내용\r\n// {username:username, password:password}\r\nexport function signin(userDTO) {\r\n    return call(\"/auth/signin\", \"POST\", userDTO)\r\n            .then(response => {\r\n                console.log(\"response : \" + response);\r\n                // alert(\"로그인 토큰 :\" + response.token);\r\n                if(response.token) {\r\n                    // 로컬 스토리지에 토큰 저장\r\n                    localStorage.setItem(\"ACCESS_TOKEN\", response.token);\r\n                    // todo 화면으로 리다이렉트\r\n                    window.location.href=\"/\";\r\n                } else {\r\n                    window.location.href=\"/login\";\r\n                }\r\n            })\r\n}\r\n\r\nexport function signout() {\r\n    // 로컬 스토리지에 있는 토큰을 없앤다\r\n    localStorage.setItem(\"ACCESS_TOKEN\", null);\r\n    window.location.href='/login';\r\n}\r\n\r\n// 계정생성\r\nexport function signup(userDTO) {\r\n    return call(\"/auth/signup\", \"POST\", userDTO);\r\n}\r\n\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,YAAY,KAAQ,eAAe,CAE5C;AACA;AACA;AACA;AACA,KAAM,CAAAC,SAAS,CAAGF,KAAK,CAACG,MAAM,CAAC,CAC3BC,OAAO,CAAEH,YAAY,CACrBI,OAAO,CAAG,CACN,cAAc,CAAC,kBACnB,CACJ,CAAC,CAAC,CAEF;AAEA;AACA;AACAH,SAAS,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,EAAI,KAAAC,cAAA,CACzCC,OAAO,CAACC,GAAG,CAAC,IAAAF,cAAA,CAAGD,MAAM,CAACI,MAAM,UAAAH,cAAA,iBAAbA,cAAA,CAAeI,WAAW,CAAC,CAAC,IAAIL,MAAM,CAACL,OAAO,GAAGK,MAAM,CAACM,GAAG,EAAE,CAAC,CAC7E,KAAM,CAAAC,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,CAClD,GAAGF,KAAK,CAAE,CACNP,MAAM,CAACJ,OAAO,CAACc,aAAa,CAAG,UAAUH,KAAK,EAAE,CACpD,CACA,MAAO,CAAAP,MAAM,CACjB,CAAC,CAAC,CAEF;AACA;AACA;AACA;AACA;AACAP,SAAS,CAACI,YAAY,CAACc,QAAQ,CAACZ,GAAG,CAACY,QAAQ,EAAIA,QAAQ,CACpDC,KAAK,EAAI,KAAAC,eAAA,CACL,KAAM,CAAAC,MAAM,EAAAD,eAAA,CAAGD,KAAK,CAACD,QAAQ,UAAAE,eAAA,iBAAdA,eAAA,CAAgBC,MAAM,CACrC,GAAGA,MAAM,GAAK,GAAG,CAAE,CACfC,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAC,QAAQ,CAC7B,MAAO,CAAAC,OAAO,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,IAAI,CAAEN,MAAM,CAAEA,MAAM,CAAC,CAAC,CACvD,CACA;AACA,MAAO,CAAAI,OAAO,CAACG,MAAM,CAACT,KAAK,CAAC,CAChC,CACJ,CAAC,CAED;AACA;AACA;AACA;AACA,MAAO,SAAS,CAAAU,IAAIA,CAACC,GAAG,CAAEnB,MAAM,CAAEN,OAAO,CAAE,CACvC,MAAO,CAAAL,SAAS,CAAC,CACba,GAAG,CAAGiB,GAAG,CACTnB,MAAM,CACNgB,IAAI,CAAGtB,OAAO,EAAI0B,SACtB,CAAC,CAAC,CACGC,IAAI,CAACC,GAAG,EAAIA,GAAG,CAACN,IAAI,CAAC,CAC9B,CAEA;AACA;AACA,MAAO,SAAS,CAAAO,MAAMA,CAACC,OAAO,CAAE,CAC5B,MAAO,CAAAN,IAAI,CAAC,cAAc,CAAE,MAAM,CAAEM,OAAO,CAAC,CACnCH,IAAI,CAACd,QAAQ,EAAI,CACdT,OAAO,CAACC,GAAG,CAAC,aAAa,CAAGQ,QAAQ,CAAC,CACrC;AACA,GAAGA,QAAQ,CAACJ,KAAK,CAAE,CACf;AACAC,YAAY,CAACqB,OAAO,CAAC,cAAc,CAAElB,QAAQ,CAACJ,KAAK,CAAC,CACpD;AACAQ,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAC,GAAG,CAC5B,CAAC,IAAM,CACHF,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAC,QAAQ,CACjC,CACJ,CAAC,CAAC,CACd,CAEA,MAAO,SAAS,CAAAa,OAAOA,CAAA,CAAG,CACtB;AACAtB,YAAY,CAACqB,OAAO,CAAC,cAAc,CAAE,IAAI,CAAC,CAC1Cd,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAC,QAAQ,CACjC,CAEA;AACA,MAAO,SAAS,CAAAc,MAAMA,CAACH,OAAO,CAAE,CAC5B,MAAO,CAAAN,IAAI,CAAC,cAAc,CAAE,MAAM,CAAEM,OAAO,CAAC,CAChD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}