{"ast":null,"code":"// 현재 파일에서는 checkBox와 label 컴포넌트를 만들어 보자\nimport{useState}from\"react\";import{ListItem,ListItemText,InputBase,Checkbox,ListItemSecondaryAction,IconButton}from'@mui/material';import DeleteOutlined from\"@mui/icons-material/DeleteOutlined\";// ListItemSecondaryAction\n// ListItem 내부에서 텍스트나 아이콘 이후에 보조 액션 영역을 오른쪽 끝에 고정배치 해준다\n// 반드시 ListItem의 자식으로만 사용해야한다\n// IconButton\n// 아이콘을 클릭 가능한 버튼으로 만들어주는 컴포넌트이다\n// DeleteOutlined\n// MUI 아이콘 라이브러리에 포함된 휴지통 아이콘 컴포넌트이다\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";let Todo=props=>{// App.js에서 받은 한가지 할일 목록\nconst[item,setItem]=useState(props.item);const[readOnly,setReadOnly]=useState(true);const editItem=props.editItem;// true -> false로 바꾸는 turnOffReadOnly함수 추가\nconst turnOffReadOnly=()=>{setReadOnly(false);};// 변경을 감지하는 함수\n// const handleChange = (e) => {\n//     setItem({\n//         ...item,\n//         title:e.target.value,\n//     })\n// }\n// 수정\n// 타이틀 변경을 위해 input의 필드에서 사용자가 입력을 받아올 때\n// editItemHandler()에서 item을 바로 넘겨버리면 한글자씩 입력할 때마다\n// HTTP 요청을 보내게 된다\n// 이는 비효율적이기 때문에 수정을 완료한 시점에서 HTTP요청을 보내야 한다\n// 입력이 끝나서 수정이 불가능한 샅애로 바뀌는 시점에\nconst editItemHandler=e=>{setItem({...item,title:e.target.value});};const turnOnReadOnly=e=>{if(e.key==='Enter'&&readOnly===false){setReadOnly(true);// readOnly true가 읽기만 가능\neditItem(item);}};// 체크박스 변경함수\nconst checkBoxEventHandler=e=>{item.done=e.target.checked;editItem(item);};// 삭제함수\nconst deleteItem=props.deleteItem;const deleteEventHandler=()=>{deleteItem(item);};return(/*#__PURE__*/// html 코드가 들어가는 부분\n// 속성을 쓸 때 카멜케이스로 작성하기\n// onclick -> onClick\n// class -> className\n_jsxs(ListItem,{children:[/*#__PURE__*/_jsx(Checkbox,{checked:item.done,onChange:checkBoxEventHandler}),/*#__PURE__*/_jsx(ListItemText,{children:/*#__PURE__*/_jsx(InputBase,{inputProps:{\"aria-label\":\"naked\"},readOnly:readOnly,onClick:turnOffReadOnly,onChange:editItemHandler,onKeyDown:turnOnReadOnly,type:\"text\",id:item.id,name:item.id,value:item.title,multiline:true,fullWidth:true})}),/*#__PURE__*/_jsx(ListItemSecondaryAction,{children:/*#__PURE__*/_jsxs(IconButton,{\"aria-label\":\"Delete Todo\",onClick:deleteEventHandler,children:[/*#__PURE__*/_jsx(DeleteOutlined,{}),\" \"]})})]}));};export default Todo;","map":{"version":3,"names":["useState","ListItem","ListItemText","InputBase","Checkbox","ListItemSecondaryAction","IconButton","DeleteOutlined","jsx","_jsx","jsxs","_jsxs","Todo","props","item","setItem","readOnly","setReadOnly","editItem","turnOffReadOnly","editItemHandler","e","title","target","value","turnOnReadOnly","key","checkBoxEventHandler","done","checked","deleteItem","deleteEventHandler","children","onChange","inputProps","onClick","onKeyDown","type","id","name","multiline","fullWidth"],"sources":["D:/full_stack_osh/4. react/todo-react-app/src/Todo.js"],"sourcesContent":["// 현재 파일에서는 checkBox와 label 컴포넌트를 만들어 보자\r\n\r\nimport { useState } from \"react\";\r\nimport { ListItem, ListItemText, InputBase, Checkbox, ListItemSecondaryAction, IconButton } from '@mui/material'\r\nimport DeleteOutlined from \"@mui/icons-material/DeleteOutlined\";\r\n\r\n// ListItemSecondaryAction\r\n// ListItem 내부에서 텍스트나 아이콘 이후에 보조 액션 영역을 오른쪽 끝에 고정배치 해준다\r\n// 반드시 ListItem의 자식으로만 사용해야한다\r\n\r\n// IconButton\r\n// 아이콘을 클릭 가능한 버튼으로 만들어주는 컴포넌트이다\r\n\r\n// DeleteOutlined\r\n// MUI 아이콘 라이브러리에 포함된 휴지통 아이콘 컴포넌트이다\r\n\r\nlet Todo = (props) => {\r\n\r\n    // App.js에서 받은 한가지 할일 목록\r\n    const [item, setItem] = useState(props.item);\r\n    const [readOnly, setReadOnly] = useState(true);\r\n    const editItem = props.editItem;\r\n\r\n    // true -> false로 바꾸는 turnOffReadOnly함수 추가\r\n    const turnOffReadOnly = () => {\r\n        setReadOnly(false);\r\n    }\r\n    \r\n    // 변경을 감지하는 함수\r\n    // const handleChange = (e) => {\r\n    //     setItem({\r\n    //         ...item,\r\n    //         title:e.target.value,\r\n    //     })\r\n    // }\r\n\r\n    // 수정\r\n    // 타이틀 변경을 위해 input의 필드에서 사용자가 입력을 받아올 때\r\n    // editItemHandler()에서 item을 바로 넘겨버리면 한글자씩 입력할 때마다\r\n    // HTTP 요청을 보내게 된다\r\n    // 이는 비효율적이기 때문에 수정을 완료한 시점에서 HTTP요청을 보내야 한다\r\n    // 입력이 끝나서 수정이 불가능한 샅애로 바뀌는 시점에\r\n    const editItemHandler = (e) => {\r\n        setItem({ ...item, title:e.target.value })\r\n    }\r\n    \r\n    const turnOnReadOnly = (e) => {\r\n        if(e.key === 'Enter' && readOnly === false) {\r\n            setReadOnly(true);  // readOnly true가 읽기만 가능\r\n            editItem(item);\r\n        }\r\n    }\r\n\r\n    // 체크박스 변경함수\r\n    const checkBoxEventHandler = (e) => {\r\n        item.done = e.target.checked;\r\n        editItem(item);\r\n    }\r\n\r\n    // 삭제함수\r\n    const deleteItem = props.deleteItem;\r\n\r\n    const deleteEventHandler = () => {\r\n        deleteItem(item);\r\n    }\r\n\r\n    return (\r\n        // html 코드가 들어가는 부분\r\n        // 속성을 쓸 때 카멜케이스로 작성하기\r\n        // onclick -> onClick\r\n        // class -> className\r\n        <ListItem>\r\n            <Checkbox checked={item.done} onChange={checkBoxEventHandler}/>\r\n            <ListItemText>\r\n                <InputBase\r\n                    inputProps={{\"aria-label\" : \"naked\"}}\r\n                    readOnly={readOnly}\r\n                    onClick={turnOffReadOnly}\r\n                    onChange={editItemHandler}\r\n                    onKeyDown={turnOnReadOnly}\r\n                    type=\"text\"\r\n                    id={item.id} \r\n                    name={item.id}\r\n                    value={item.title}\r\n                    multiline={true}\r\n                    fullWidth={true}\r\n                />\r\n            </ListItemText>\r\n            <ListItemSecondaryAction>\r\n                <IconButton aria-label=\"Delete Todo\" onClick={deleteEventHandler}> \r\n                    <DeleteOutlined /> {/* 휴지통 버튼 */}\r\n                </IconButton>\r\n            </ListItemSecondaryAction>\r\n        </ListItem>\r\n    )\r\n}\r\n\r\nexport default Todo;"],"mappings":"AAAA;AAEA,OAASA,QAAQ,KAAQ,OAAO,CAChC,OAASC,QAAQ,CAAEC,YAAY,CAAEC,SAAS,CAAEC,QAAQ,CAAEC,uBAAuB,CAAEC,UAAU,KAAQ,eAAe,CAChH,MAAO,CAAAC,cAAc,KAAM,oCAAoC,CAE/D;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEA,GAAI,CAAAC,IAAI,CAAIC,KAAK,EAAK,CAElB;AACA,KAAM,CAACC,IAAI,CAAEC,OAAO,CAAC,CAAGf,QAAQ,CAACa,KAAK,CAACC,IAAI,CAAC,CAC5C,KAAM,CAACE,QAAQ,CAAEC,WAAW,CAAC,CAAGjB,QAAQ,CAAC,IAAI,CAAC,CAC9C,KAAM,CAAAkB,QAAQ,CAAGL,KAAK,CAACK,QAAQ,CAE/B;AACA,KAAM,CAAAC,eAAe,CAAGA,CAAA,GAAM,CAC1BF,WAAW,CAAC,KAAK,CAAC,CACtB,CAAC,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAM,CAAAG,eAAe,CAAIC,CAAC,EAAK,CAC3BN,OAAO,CAAC,CAAE,GAAGD,IAAI,CAAEQ,KAAK,CAACD,CAAC,CAACE,MAAM,CAACC,KAAM,CAAC,CAAC,CAC9C,CAAC,CAED,KAAM,CAAAC,cAAc,CAAIJ,CAAC,EAAK,CAC1B,GAAGA,CAAC,CAACK,GAAG,GAAK,OAAO,EAAIV,QAAQ,GAAK,KAAK,CAAE,CACxCC,WAAW,CAAC,IAAI,CAAC,CAAG;AACpBC,QAAQ,CAACJ,IAAI,CAAC,CAClB,CACJ,CAAC,CAED;AACA,KAAM,CAAAa,oBAAoB,CAAIN,CAAC,EAAK,CAChCP,IAAI,CAACc,IAAI,CAAGP,CAAC,CAACE,MAAM,CAACM,OAAO,CAC5BX,QAAQ,CAACJ,IAAI,CAAC,CAClB,CAAC,CAED;AACA,KAAM,CAAAgB,UAAU,CAAGjB,KAAK,CAACiB,UAAU,CAEnC,KAAM,CAAAC,kBAAkB,CAAGA,CAAA,GAAM,CAC7BD,UAAU,CAAChB,IAAI,CAAC,CACpB,CAAC,CAED,oBACI;AACA;AACA;AACA;AACAH,KAAA,CAACV,QAAQ,EAAA+B,QAAA,eACLvB,IAAA,CAACL,QAAQ,EAACyB,OAAO,CAAEf,IAAI,CAACc,IAAK,CAACK,QAAQ,CAAEN,oBAAqB,CAAC,CAAC,cAC/DlB,IAAA,CAACP,YAAY,EAAA8B,QAAA,cACTvB,IAAA,CAACN,SAAS,EACN+B,UAAU,CAAE,CAAC,YAAY,CAAG,OAAO,CAAE,CACrClB,QAAQ,CAAEA,QAAS,CACnBmB,OAAO,CAAEhB,eAAgB,CACzBc,QAAQ,CAAEb,eAAgB,CAC1BgB,SAAS,CAAEX,cAAe,CAC1BY,IAAI,CAAC,MAAM,CACXC,EAAE,CAAExB,IAAI,CAACwB,EAAG,CACZC,IAAI,CAAEzB,IAAI,CAACwB,EAAG,CACdd,KAAK,CAAEV,IAAI,CAACQ,KAAM,CAClBkB,SAAS,CAAE,IAAK,CAChBC,SAAS,CAAE,IAAK,CACnB,CAAC,CACQ,CAAC,cACfhC,IAAA,CAACJ,uBAAuB,EAAA2B,QAAA,cACpBrB,KAAA,CAACL,UAAU,EAAC,aAAW,aAAa,CAAC6B,OAAO,CAAEJ,kBAAmB,CAAAC,QAAA,eAC7DvB,IAAA,CAACF,cAAc,GAAE,CAAC,IAAC,EACX,CAAC,CACQ,CAAC,EACpB,CAAC,EAEnB,CAAC,CAED,cAAe,CAAAK,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}